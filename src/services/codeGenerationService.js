// This is a mock service for code generation
// In a real application, this would connect to an AI service API

const MOCK_RESPONSES = {
  javascript: {
    sort: `function sortArrayByProperty(array, property) {
  if (!Array.isArray(array) || !property) {
    throw new Error('Invalid arguments');
  }
  
  return [...array].sort((a, b) => {
    if (a[property] < b[property]) return -1;
    if (a[property] > b[property]) return 1;
    return 0;
  });
}

// Example usage:
const users = [
  { name: 'John', age: 30 },
  { name: 'Alice', age: 25 },
  { name: 'Bob', age: 35 }
];

const sortedByAge = sortArrayByProperty(users, 'age');
console.log(sortedByAge);`,
    api: `// RESTful API with Express
const express = require('express');
const app = express();
const PORT = process.env.PORT || 3000;

app.use(express.json());

// Sample data
let items = [
  { id: 1, name: 'Item 1', price: 10.99 },
  { id: 2, name: 'Item 2', price: 24.99 },
  { id: 3, name: 'Item 3', price: 5.99 }
];

// Get all items
app.get('/api/items', (req, res) => {
  res.json(items);
});

// Get single item
app.get('/api/items/:id', (req, res) => {
  const item = items.find(i => i.id === parseInt(req.params.id));
  if (!item) return res.status(404).json({ error: 'Item not found' });
  res.json(item);
});

// Create new item
app.post('/api/items', (req, res) => {
  const newItem = {
    id: items.length + 1,
    name: req.body.name,
    price: req.body.price
  };
  
  items.push(newItem);
  res.status(201).json(newItem);
});

app.listen(PORT, () => {
  console.log(\`Server running on port \${PORT}\`);
});`
  },
  python: {
    sort: `def sort_array_by_property(array, property):
    """
    Sort an array of dictionaries by a specified property
    
    Args:
        array (list): List of dictionaries to sort
        property (str): The property to sort by
        
    Returns:
        list: A new sorted list
    """
    if not isinstance(array, list) or not property:
        raise ValueError("Invalid arguments")
        
    return sorted(array, key=lambda x: x.get(property))
    
    
# Example usage
users = [
    {"name": "John", "age": 30},
    {"name": "Alice", "age": 25},
    {"name": "Bob", "age": 35}
]

sorted_by_age = sort_array_by_property(users, "age")
print(sorted_by_age)`,
    api: `# RESTful API with Flask
from flask import Flask, request, jsonify

app = Flask(__name__)

# Sample data
items = [
    {"id": 1, "name": "Item 1", "price": 10.99},
    {"id": 2, "name": "Item 2", "price": 24.99},
    {"id": 3, "name": "Item 3", "price": 5.99}
]

# Get all items
@app.route('/api/items', methods=['GET'])
def get_items():
    return jsonify(items)

# Get single item
@app.route('/api/items/<int:item_id>', methods=['GET'])
def get_item(item_id):
    item = next((i for i in items if i['id'] == item_id), None)
    if not item:
        return jsonify({"error": "Item not found"}), 404
    return jsonify(item)

# Create new item
@app.route('/api/items', methods=['POST'])
def create_item():
    data = request.get_json()
    new_item = {
        "id": len(items) + 1,
        "name": data['name'],
        "price": data['price']
    }
    
    items.append(new_item)
    return jsonify(new_item), 201

if __name__ == '__main__':
    app.run(debug=True, port=3000)`
  }
};

export const generateCode = async (prompt, language) => {
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 1500));
  
  const lowerPrompt = prompt.toLowerCase();
  
  // Simple keyword matching for demo purposes
  if (lowerPrompt.includes('sort') || lowerPrompt.includes('order')) {
    return MOCK_RESPONSES[language]?.sort || 'Code generation not available for this language';
  } else if (
    lowerPrompt.includes('api') || 
    lowerPrompt.includes('rest') || 
    lowerPrompt.includes('endpoint')
  ) {
    return MOCK_RESPONSES[language]?.api || 'Code generation not available for this language';
  }
  
  // Default response if no keyword matches
  return `// This is a generated code sample for ${language}
// Based on prompt: "${prompt}"

// In a production environment, this would be generated by a real AI model
// For now, this is just a placeholder

console.log("Hello from DevSpawn AI Code Generator!");
`;
};

// In a real application, this would connect to a backend service with an AI model
// export const generateCode = async (prompt, language) => {
//   const response = await fetch('/api/generate-code', {
//     method: 'POST',
//     headers: {
//       'Content-Type': 'application/json',
//     },
//     body: JSON.stringify({ prompt, language }),
//   });
//
//   if (!response.ok) {
//     throw new Error('Failed to generate code');
//   }
//
//   const data = await response.json();
//   return data.code;
// }; 